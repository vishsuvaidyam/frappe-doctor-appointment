[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"w-full bg-info h-100\">\n     <div class=\"container mt-5\">\n    <table class=\"table table-striped table-hover\">\n      <thead class=\"table-dark\">\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Patient</th>\n          <th scope=\"col\">Age</th>\n          <th scope=\"col\">Date & Time</th>\n           <th scope=\"col\">Doctor</th>\n          <th scope=\"col\">Fees</th>\n          <th scope=\"col\">Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">1</th>\n          <td>John Doe</td>\n          <td>John Doe</td>\n          <td>John Doe</td>\n          <td>John Doe</td>\n          <td>johndoe@example.com</td>\n          <td>\n            <button class=\"btn btn-primary btn-sm\">Edit</button>\n            <button class=\"btn btn-danger btn-sm\">Delete</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>",
  "modified": "2024-12-31 22:30:06.625560",
  "name": "Appointmet Dp",
  "private": 0,
  "roles": [],
  "script": null,
  "style": null
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"container-fluid\">\n  <div class=\"row d-flex justify-content-between\">\n    <!-- Patient Filter -->\n   <div class=\"flex\">\n  <div class=\"col-md-6 mb-3\">\n    <input\n      type=\"text\"\n \n      class=\"form-control patient\"\n      placeholder=\"Search by Patient\"\n    \n    />\n  </div>\n\n  <!-- Doctor Filter -->\n  <div class=\"col-md-6 mb-3\">\n    <input\n      type=\"text\"\n      id=\"doctor\"\n      class=\" doctor\"\n      placeholder=\"Search by Doctor\"\n      \n    />\n  </div>\n</div>\n    <!-- Apply Filters Button -->\n    <div class=\"col-md-2 mb-3 d-flex align-items-end\">\n      <button\n        id=\"filter-btn\"\n        class=\"btn btn-primary filter-btn\"\n      >\n        Apply Filters\n      </button>\n    </div>\n  </div>\n</div>\n\n<div class=\"w-full\">\n  <table class=\"table\" style=\"width: 100%;\">\n    <thead class=\"table-dark\">\n      <tr>\n        <th class=\"text-center\">Sno.</th>\n        <th>Patient</th>\n        <th class=\"text-center\">Age</th>\n        <th class=\"text-center\">Gender</th>\n        <th class=\"text-center\">Date & Time</th>\n        <th>Doctor</th>\n        <th class=\"text-center\">Fees</th>\n        <th class=\"text-center\">Status</th>\n        <th class=\"text-center\">Actions</th>\n      </tr>\n    </thead>\n    <tbody class=\"appointment-table-body\">\n    </tbody>\n  </table>\n  <div class=\"pagination-container pagination text-center mt-3\" id=\"pagination\"></div>\n</div>\n",
  "modified": "2025-01-25 17:19:48.373872",
  "name": "Appointment Report",
  "private": 0,
  "roles": [],
  "script": "let currentPage = 1;\nconst rowsPerPage = 10;\nlet patientFilter = '';\nlet doctorFilter = '';\n\n\n// Function to fetch data and apply filters\nfunction fetchAppointmentsData() {\n    const patientFilter = root_element.querySelector(\".patient\").value.toLowerCase();\n    const doctorFilter = root_element.querySelector(\".doctor\").value.toLowerCase();\n    \n    // Fetch the data and apply filters\n    frappe.call({\n        method: \"appointments_management.controllers.api.my_appointment\",\n        callback: function (response) {\n            if (response.message) {\n                let data = response.message;\n\n                // Apply patient filter\n                if (patientFilter) {\n                    data = data.filter(item => item.patient.toLowerCase().includes(patientFilter));\n                }\n\n                // Apply doctor filter\n                if (doctorFilter) {\n                    data = data.filter(item => item.doctor_name.toLowerCase().includes(doctorFilter));\n                }\n\n                // Render the filtered data\n                renderTable(data);\n                renderPagination(data);\n            }\n        }\n    });\n}\n\n// Attach event listeners to filters for automatic application\nroot_element.querySelector(\".patient\").addEventListener(\"input\", fetchAppointmentsData);\nroot_element.querySelector(\".doctor\").addEventListener(\"input\", fetchAppointmentsData);\n\n\n// Function to render the table with filtered data\nfunction renderTable(data) {\n    const tableBody = root_element.querySelector(\".appointment-table-body\");\n    tableBody.innerHTML = \"\"; // Clear the table body\n    \n    const start = (currentPage - 1) * rowsPerPage;\n    const end = currentPage * rowsPerPage;\n    const pageData = data.slice(start, end);  // Paginated data\n\n    pageData.forEach((item, index) => {\n        const row = document.createElement(\"tr\");\n\n        row.innerHTML = `\n            <td scope=\"row\" class=\"text-center\" style=\"color:black;\">${index + 1}</td>\n            <td>${item.patient || \"N/A\"}</td>\n            <td class=\"text-center\">${item.pataient_age || \"N/A\"}</td>\n            <td class=\"text-center\">${item.gender || \"N/A\"}</td>\n            <td class=\"text-center\">${item.datetime || \"N/A\"}</td>\n            <td>${item.doctor_name || \"N/A\"}</td>\n            <td class=\"text-center\">${item.doctor_fees || \"N/A\"}</td>\n            <td class=\"status-cell text-center\">\n                <span class=\"badge rounded-pill px-10 py-2 ${item.workflow_state === 'Approved' ? 'testapporved' : ''}\n                            ${item.workflow_state === 'Rejected' ? 'testreject' : ''} \n                            ${item.workflow_state === 'Pending' ? 'testPending' : ''}\" style=\"width: 100px; height: 28px;\">\n                    ${item.workflow_state}\n                </span>\n            </td>\n            <td class=\"flex justify-center\" style=\"gap:10px;\">\n                <!-- Dropdown Menu for Actions -->\n                <div class=\"dropdown\">\n                    <button class=\"btn btn-secondary dropdown-toggle dropdownMenuButton text-center pb-2 px-4\" type=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        ...\n                    </button>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        <button class=\"btn dropdown-item approve-btn ${item.workflow_state === \"Approved\" ? 'disabled' : ''}\">Approve</button>\n                        <button  v-if=\"item.workflow_state !== 'Approved'\" class=\"btn dropdown-item reject-btn ${item.workflow_state === \"Rejected\" ? 'disabled' : ''}\">Reject</button>\n                        <button class=\"btn dropdown-item send-email-btn\">Send Email</button>\n                      <button id=\"review-button\" v-if=\"item.workflow_state !== 'Approved'\" class=\"review-button btn btn-primary \">Review</button>\n\n                        <button class=\"btn dropdown-item btn-warning de\">Delete</button>\n                    </div>\n                </div> \n            </td>\n        `;\n\n        tableBody.appendChild(row);\n\nconst buttons = row.querySelectorAll('.review-button, .reject-btn'); // Select both buttons\nif (item.workflow_state === 'Approved') {\n    buttons.forEach(button => button.remove()); // Remove both buttons if condition is met\n}\n\n        // Dropdown functionality\n        const dropdownButton = row.querySelector('.dropdownMenuButton');\n        const dropdownMenu = row.querySelector('.dropdown-menu');\n        dropdownButton.addEventListener('click', function (event) {\n            event.stopPropagation();\n            dropdownMenu.classList.toggle('show');\n        });\n\n        root_element.addEventListener('click', function (event) {\n            if (!dropdownButton.contains(event.target) && !dropdownMenu.contains(event.target)) {\n                dropdownMenu.classList.remove('show');\n            }\n        });\n\n        // Button event listeners for approve, reject, review, etc.\n        const approveBtn = row.querySelector(\".approve-btn\");\n        if (approveBtn) approveBtn.addEventListener(\"click\", () => approveAppointment(item.name, row));\n        const rejectBtn = row.querySelector(\".reject-btn\");\n        if (rejectBtn) rejectBtn.addEventListener(\"click\", () => rejectAppointment(item.name, row));\n        const reviewBtn = row.querySelector(\".review-button\");\n        if (reviewBtn) reviewBtn.addEventListener(\"click\", () => workflow_review(item.name, row));\n        const sendEmailBtn = row.querySelector(\".send-email-btn\");\n        if (sendEmailBtn) sendEmailBtn.addEventListener(\"click\", () => sendEmail(item.email, item.patient, item.doctor_name, item.datetime));\n        const deleteBtn = row.querySelector(\".de\");\n        if (deleteBtn) deleteBtn.addEventListener(\"click\", () => deleteAppointment(item.name, row));\n    });\n\n    // Render pagination after table rows\n    renderPagination(data);\n}\n\n// Function to render pagination\nfunction renderPagination(data) {\n    const paginationContainer = root_element.querySelector(\"#pagination\");\n    paginationContainer.innerHTML = \"\";\n\n    const totalPages = Math.ceil(data.length / rowsPerPage);\n\n    const prevButton = document.createElement(\"button\");\n    prevButton.textContent = \"Previous\";\n    prevButton.disabled = currentPage === 1;\n    prevButton.addEventListener(\"click\", () => {\n        currentPage--;\n        fetchAppointmentsData();\n    });\n    paginationContainer.appendChild(prevButton);\n\n    for (let i = 1; i <= totalPages; i++) {\n        const pageButton = document.createElement(\"button\");\n        pageButton.textContent = i;\n        pageButton.classList.toggle(\"active\", i === currentPage);\n        pageButton.addEventListener(\"click\", () => {\n            currentPage = i;\n            fetchAppointmentsData();\n        });\n        paginationContainer.appendChild(pageButton);\n    }\n\n    const nextButton = document.createElement(\"button\");\n    nextButton.textContent = \"Next\";\n    nextButton.disabled = currentPage === totalPages;\n    nextButton.addEventListener(\"click\", () => {\n        currentPage++;\n        fetchAppointmentsData();\n    });\n    paginationContainer.appendChild(nextButton);\n}\n\n// Event listeners for filter inputs and button\nroot_element.querySelector(\".filter-btn\").addEventListener(\"click\", function () {\n    patientFilter = root_element.querySelector(\".patient\").value;\n    doctorFilter = root_element.querySelector(\".doctor\").value;\n    currentPage = 1; // Reset to page 1 when filters are applied\n    fetchAppointmentsData();\n});\n\n// Initial data load when the page loads\nfetchAppointmentsData();\n\n\n// Approve Appointment\nfunction approveAppointment(appointmentName, row) {\n    frappe.call({\n        method: \"appointments_management.controllers.api.approve_appointment\",\n        args: {\n            appointment_name: appointmentName,\n            status: \"Approved\",\n        },\n        callback: function (response) {\n            if (response.message === \"success\") {\n                frappe.msgprint(\"Appointment approved successfully!\");\n                localStorage.setItem(appointmentName, \"Accepted\");\n                const statusCell = row.querySelector(\".status-cell\");\n                if (statusCell) {\n                    statusCell.innerText = \"Accepted\";\n                }\n            } else {\n                frappe.msgprint(\"Failed to approve appointment. Please try again.\");\n            }\n        },\n    });\n}\n\n// Reject Appointment\nfunction rejectAppointment(appointmentName, row) {\n    frappe.call({\n        method: \"appointments_management.controllers.api.reject_appointment\",\n        args: {\n            appointment_name: appointmentName,\n            status: \"Rejected\",\n        },\n        callback: function (response) {\n            if (response.message === \"success\") {\n                frappe.msgprint(\"Appointment rejected successfully!\");\n                localStorage.setItem(appointmentName, \"Rejected\");\n                const statusCell = row.querySelector(\".status-cell\");\n                if (statusCell) {\n                    statusCell.innerText = \"Rejected\";\n                }\n            } else {\n                frappe.msgprint(\"Failed to reject appointment. Please try again.\");\n            }\n        },\n    });\n}\nfunction workflow_review(appointmentName, row) {\n    frappe.call({\n        method: \"appointments_management.controllers.api.review_action\",   \n        args: {\n            appointment_name: appointmentName,  // Send the correct argument name\n            status: \"Review\"  // Provide the status explicitly here\n        },\n        callback: function(response) {\n            console.log(response);  // Log the response to verify structure\n            if (response.message === \"success\") {\n                frappe.msgprint('Review action completed successfully.');\n\n                // Update the status cell in the row if needed\n                const statusCell = row.querySelector(\".status-cell\");\n                if (statusCell) {\n                    statusCell.innerText = \"Review\";  // Update the status text\n                }\n\n                const appointmentUrl = `/app/appointment/${appointmentName}`;\n                window.location.href = appointmentUrl;  \n            } else {\n                frappe.msgprint(\"Failed to initiate review. Please try again.\");\n            }\n        }\n    });\n}\n\n\nfunction deleteAppointment(appointmentName, row) {\n  \n    frappe.call({\n        method: \"appointments_management.controllers.api.delete_appointment\",   \n        args: {\n            name: appointmentName,  // Ensure this matches the parameter in the API\n        },\n        callback: function(response) {\n            \n                  console.log(response.message.status )\n            if (response.message.status=== \"success\") {\n                frappe.msgprint(\"Appointment deleted successfully.\");\n                // Remove the row from the UI\n                if (row && row.parentNode) {\n                    row.parentNode.removeChild(row);\n                }\n            } else {\n                frappe.msgprint(\"Failed to delete appointment. Please try again.\");\n            }\n        },\n        error: function(err) {\n            frappe.msgprint(\"An error occurred while trying to delete the appointment.\");\n            console.error(err);\n        }\n    });\n}\n\n\n  \n// Send Email Function\nfunction sendEmail(email, patient, doctorName, datetime) {\n    if (!email) {\n        frappe.msgprint(\"No email address available for this appointment.\");\n        return;\n    }\n\n    frappe.call({\n        method: \"appointments_management.controllers.api.send_appointment_email\",\n        args: {\n            recipient_email: email,\n            patient: patient,\n            doctor_name: doctorName,\n            datetime: datetime,\n        },\n        callback: function (response) {\n            if (response.message === \"success\") {\n                frappe.msgprint(\"Email sent successfully!\");\n            } else {\n                frappe.msgprint(\"Failed to send email. Please try again.\");\n            }\n        },\n    });\n}\n\nfunction renderPagination(data) {\n    const paginationContainer = root_element.querySelector(\".pagination\");\n    paginationContainer.innerHTML = \"\";\n\n    const totalPages = Math.ceil(data.length / rowsPerPage);\n\n    const prevButton = document.createElement(\"button\");\n    prevButton.textContent = \"Previous\";\n    prevButton.disabled = currentPage === 1;\n    prevButton.addEventListener(\"click\", () => {\n        currentPage--;\n        appointmentdata(patientFilter, doctorFilter); // Update table with new page\n    });\n    paginationContainer.appendChild(prevButton);\n\n    for (let i = 1; i <= totalPages; i++) {\n        const pageButton = document.createElement(\"button\");\n        pageButton.textContent = i;\n        if (i === currentPage) {\n            pageButton.classList.add(\"active\");\n        }\n        pageButton.addEventListener(\"click\", () => {\n            currentPage = i;\n            appointmentdata(patientFilter, doctorFilter); // Update table with new page\n        });\n        paginationContainer.appendChild(pageButton);\n    }\n\n    const nextButton = document.createElement(\"button\");\n    nextButton.textContent = \"Next\";\n    nextButton.disabled = currentPage === totalPages;\n    nextButton.addEventListener(\"click\", () => {\n        currentPage++;\n        appointmentdata(patientFilter, doctorFilter); // Update table with new page\n    });\n    paginationContainer.appendChild(nextButton);\n}\n\n\n",
  "style": ".indicator-pill.red {\n    background-color: #ffcccc; /* Light red background */\n    color: #cc0000; /* Dark red text */\n    font-weight: bold;\n}\n\n.indicator-pill.orange {\n    background-color: #ffebcc; /* Light orange background */\n    color: #cc7a00; /* Dark orange text */\n    font-weight: bold;\n}\n\n\n\n \n.dropdown-menu {\n    display: none;  \n    position: absolute;\n    z-index: 1050; \n    background-color: #fff;\n    border: 1px solid rgba(0, 0, 0, 0.15);\n    border-radius: 0.25rem;\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n    min-width: 12rem;\n    right: 0;  \n    transform: translateX(-73%);\n}\n\n/* Show dropdown when 'show' class is added */\n.dropdown-menu.show {\n    display: block;\n}\n\n/* Optional: Style dropdown button for better visibility */\n.dropdown-toggle {\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    line-height: 1.5;\n    background-color: #6c757d;\n    color: white;\n    cursor: pointer;\n}\n\n.dropdown-toggle::after {\n    display: inline-block;\n    margin-left:0;\n    vertical-align: 0.255em;\n    content: \"\";\n    border-top: 0;\n    border-right:0;\n    border-bottom: 0;\n    border-left: 0;\n}\n\n/*.btn:not(.btn-md):not(.btn-lg), div#driver-popover-item .driver-popover-footer button:not(.btn-md):not(.btn-lg) {*/\n/*    padding: 4px 16px;*/\n    \n/*}*/\n\n/* Style for dropdown items */\n.dropdown-item {\n    display: block;\n    width: 100%;\n    padding: 0.375rem 1.25rem;\n    clear: both;\n    font-weight: 400;\n    color: #212529;\n    text-align: inherit;\n    background-color: transparent;\n    border: 0;\n    cursor: pointer;\n}\n\n.dropdown-item:hover {\n    background-color: #f8f9fa;\n}\n\n/* Optional: Style disabled items */\n.dropdown-item:disabled {\n    background-color: #e9ecef;\n    color: #6c757d;\n    cursor: not-allowed;\n}\n\n\n.testapporved{\n    background-color:#62b59b;\n    color:white; \n    \n}\n\n\n.testreject{\n    background-color:#da1364;\n    color:white;\n}\n.testPending{\n      background-color:#f5945c;\n    color:white;\n}\n \n \n table tbody tr:hover {\n  background-color: #f0f0f0; /* Light gray background */\n  transition: background-color 0.2s ease; /* Smooth transition effect */\n}\n\n"
 }
]